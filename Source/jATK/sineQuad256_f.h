/*==============================================================================
 sineQuad256_f.h  :   Jeff's (Juce) Audio ToolKit
 Created: 28 Apr 2015 10:00:44am
 Author:  Jeff-Russ     https://github.com/Jeff-Russ
 =============================================================================*/

#ifndef SINEQUAD256_F_H_INCLUDED
#define SINEQUAD256_F_H_INCLUDED

namespace jATK
{
    static const float sineQuad256_f [256] = 
    {   
        0.0f, 
        0.0061358846724033355712890625f, 
        0.01227153837680816650390625f, 
        0.0184067301452159881591796875f, 
        0.0245412290096282958984375f, 
        0.03067480213940143585205078125f, 
        0.03680722415447235107421875f, 
        0.042938254773616790771484375f, 
        0.049067676067352294921875f, 
        0.0551952458918094635009765625f, 
        0.06132073700428009033203125f, 
        0.067443914711475372314453125f, 
        0.073564566671848297119140625f, 
        0.0796824395656585693359375f, 
        0.08579730987548828125f, 
        0.091908954083919525146484375f, 
        0.09801714122295379638671875f, 
        0.104121632874011993408203125f, 
        0.11022220551967620849609375f, 
        0.116318635642528533935546875f, 
        0.12241066992282867431640625f, 
        0.1284981071949005126953125f, 
        0.1345807015895843505859375f, 
        0.14065824449062347412109375f, 
        0.14673046767711639404296875f, 
        0.1527971923351287841796875f, 
        0.1588581502437591552734375f, 
        0.164913117885589599609375f, 
        0.1709618866443634033203125f, 
        0.17700421810150146484375f, 
        0.18303988873958587646484375f, 
        0.18906866014003753662109375f, 
        0.1950903236865997314453125f, 
        0.20110462605953216552734375f, 
        0.20711137354373931884765625f, 
        0.21311031281948089599609375f, 
        0.21910123527050018310546875f, 
        0.2250839173793792724609375f, 
        0.2310581207275390625f, 
        0.2370235919952392578125f, 
        0.242980182170867919921875f, 
        0.24892760813236236572265625f, 
        0.2548656463623046875f, 
        0.2607941329479217529296875f, 
        0.2667127549648284912109375f, 
        0.2726213634014129638671875f, 
        0.278519690036773681640625f, 
        0.284407556056976318359375f, 
        0.2902846634387969970703125f, 
        0.296150863170623779296875f, 
        0.302005946636199951171875f, 
        0.3078496456146240234375f, 
        0.3136817514896392822265625f, 
        0.3195020258426666259765625f, 
        0.325310289859771728515625f, 
        0.33110630512237548828125f, 
        0.3368898332118988037109375f, 
        0.342660725116729736328125f, 
        0.3484186828136444091796875f, 
        0.35416352748870849609375f, 
        0.359895050525665283203125f, 
        0.36561298370361328125f, 
        0.371317207813262939453125f, 
        0.3770073950290679931640625f, 
        0.382683455944061279296875f, 
        0.3883450329303741455078125f, 
        0.3939920365810394287109375f, 
        0.3996241986751556396484375f, 
        0.405241310596466064453125f, 
        0.410843193531036376953125f, 
        0.4164295494556427001953125f, 
        0.42200028896331787109375f, 
        0.427555084228515625f, 
        0.4330938160419464111328125f, 
        0.4386162459850311279296875f, 
        0.444122135639190673828125f, 
        0.4496113359928131103515625f, 
        0.4550835788249969482421875f, 
        0.460538685321807861328125f, 
        0.4659765064716339111328125f, 
        0.4713967144489288330078125f, 
        0.4767992496490478515625f, 
        0.482183754444122314453125f, 
        0.4875501692295074462890625f, 
        0.492898166179656982421875f, 
        0.498227655887603759765625f, 
        0.5035383701324462890625f, 
        0.50883018970489501953125f, 
        0.514102756977081298828125f, 
        0.5193560123443603515625f, 
        0.524589717388153076171875f, 
        0.529803574085235595703125f, 
        0.534997642040252685546875f, 
        0.54017150402069091796875f, 
        0.545324981212615966796875f, 
        0.55045795440673828125f, 
        0.55557024478912353515625f, 
        0.560661613941192626953125f, 
        0.5657317638397216796875f, 
        0.57078075408935546875f, 
        0.575808227062225341796875f, 
        0.58081400394439697265625f, 
        0.585797846317291259765625f, 
        0.590759694576263427734375f, 
        0.595699310302734375f, 
        0.600616455078125f, 
        0.605511009693145751953125f, 
        0.6103827953338623046875f, 
        0.615231573581695556640625f, 
        0.62005722522735595703125f, 
        0.624859511852264404296875f, 
        0.629638254642486572265625f, 
        0.634393274784088134765625f, 
        0.639124453067779541015625f, 
        0.643831551074981689453125f, 
        0.64851438999176025390625f, 
        0.65317285060882568359375f, 
        0.657806694507598876953125f, 
        0.662415802478790283203125f, 
        0.66699993610382080078125f, 
        0.67155897617340087890625f, 
        0.67609274387359619140625f, 
        0.68060100078582763671875f, 
        0.685083687305450439453125f, 
        0.689540565013885498046875f, 
        0.693971455097198486328125f, 
        0.698376238346099853515625f, 
        0.7027547359466552734375f, 
        0.707106769084930419921875f, 
        0.711432158946990966796875f, 
        0.715730845928192138671875f, 
        0.72000253200531005859375f, 
        0.724247038364410400390625f, 
        0.7284643650054931640625f, 
        0.732654273509979248046875f, 
        0.736816585063934326171875f, 
        0.740951120853424072265625f, 
        0.745057761669158935546875f, 
        0.749136388301849365234375f, 
        0.753186762332916259765625f, 
        0.75720882415771484375f, 
        0.761202394962310791015625f, 
        0.765167295932769775390625f, 
        0.769103348255157470703125f, 
        0.773010432720184326171875f, 
        0.77688848972320556640625f, 
        0.780737221240997314453125f, 
        0.784556567668914794921875f, 
        0.78834640979766845703125f, 
        0.792106568813323974609375f, 
        0.795836925506591796875f, 
        0.79953730106353759765625f, 
        0.80320751667022705078125f, 
        0.806847512722015380859375f, 
        0.810457170009613037109375f, 
        0.814036309719085693359375f, 
        0.817584812641143798828125f, 
        0.82110249996185302734375f, 
        0.824589312076568603515625f, 
        0.828045070171356201171875f, 
        0.831469595432281494140625f, 
        0.834862887859344482421875f, 
        0.838224709033966064453125f, 
        0.841554939746856689453125f, 
        0.844853579998016357421875f, 
        0.84812033176422119140625f, 
        0.85135519504547119140625f, 
        0.85455799102783203125f, 
        0.85772860050201416015625f, 
        0.86086690425872802734375f, 
        0.863972842693328857421875f, 
        0.86704623699188232421875f, 
        0.870086967945098876953125f, 
        0.873094975948333740234375f, 
        0.87607014179229736328125f, 
        0.87901222705841064453125f, 
        0.881921231746673583984375f, 
        0.88479709625244140625f, 
        0.88763964176177978515625f, 
        0.890448749065399169921875f, 
        0.893224298954010009765625f, 
        0.8959662914276123046875f, 
        0.898674428462982177734375f, 
        0.9013488292694091796875f, 
        0.903989315032958984375f, 
        0.906595706939697265625f, 
        0.9091680049896240234375f, 
        0.911706030368804931640625f, 
        0.914209783077239990234375f, 
        0.91667902469635009765625f, 
        0.919113814830780029296875f, 
        0.921514034271240234375f, 
        0.92387950420379638671875f, 
        0.926210224628448486328125f, 
        0.928506076335906982421875f, 
        0.930766999721527099609375f, 
        0.932992756366729736328125f, 
        0.93518352508544921875f, 
        0.937339007854461669921875f, 
        0.93945920467376708984375f, 
        0.941544055938720703125f, 
        0.943593442440032958984375f, 
        0.945607364177703857421875f, 
        0.947585582733154296875f, 
        0.949528157711029052734375f, 
        0.951435029506683349609375f, 
        0.953306019306182861328125f, 
        0.95514118671417236328125f, 
        0.956940352916717529296875f, 
        0.958703458309173583984375f, 
        0.96043050289154052734375f, 
        0.962121427059173583984375f, 
        0.963776051998138427734375f, 
        0.965394437313079833984375f, 
        0.966976463794708251953125f, 
        0.968522131443023681640625f, 
        0.970031261444091796875f, 
        0.97150385379791259765625f, 
        0.972939968109130859375f, 
        0.97433936595916748046875f, 
        0.975702106952667236328125f, 
        0.9770281314849853515625f, 
        0.97831737995147705078125f, 
        0.979569733142852783203125f, 
        0.98078525066375732421875f, 
        0.9819638729095458984375f, 
        0.983105480670928955078125f, 
        0.984210073947906494140625f, 
        0.985277652740478515625f, 
        0.98630809783935546875f, 
        0.987301409244537353515625f, 
        0.988257586956024169921875f, 
        0.9891765117645263671875f, 
        0.9900581836700439453125f, 
        0.9909026622772216796875f, 
        0.991709768772125244140625f, 
        0.9924795627593994140625f, 
        0.993211925029754638671875f, 
        0.99390697479248046875f, 
        0.994564592838287353515625f, 
        0.995184719562530517578125f, 
        0.995767414569854736328125f, 
        0.996312618255615234375f, 
        0.99682033061981201171875f, 
        0.997290432453155517578125f, 
        0.997723042964935302734375f, 
        0.998118102550506591796875f, 
        0.998475551605224609375f, 
        0.998795449733734130859375f, 
        0.999077737331390380859375f, 
        0.999322414398193359375f, 
        0.999529421329498291015625f, 
        0.999698817729949951171875f, 
        0.99983060359954833984375f, 
        0.999924719333648681640625f, 
        0.9999811649322509765625f,  
    };
} // end namespace jATK

#endif  // SINEQUAD256_F_H_INCLUDED

/*
#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;
int main() 
{   for (int i = 0; i <256; ++i)
    {   float x = (double)i / 512  * M_PI;
        cout << fixed << setprecision(30) << sin(x) << ", " <<endl;
    }
}
*/